<html>
<head>
  <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/chartist/0.11.4/chartist.min.css"> -->
  <link rel="stylesheet" href="/ui/chartist.min.css">
  <style type="text/css">
    .chart#flowChart {
        height: 60%;
        width: 100%;
    }
    .chart#tankChart {
        height: 25%;
        width: 100%;
    }
    .chartTitle {
        margin: 5px;
    }
    .ct-series-a .ct-line {
        stroke: blue;
        stroke-width: 2;
    }
    .hdr {
        display: inline;
    }
    .hdr h4 {
        display: inline;
    }
    .hdr h1 {
        display: inline;
        font-weight: bold;
        font-size: 40px;
    }
    .hdr span {
        float: right;
    }
  </style>

  <script type="module"> 
      // import { LineChart, FixedScaleAxis } from 'https://esm.sh/chartist';
      import { LineChart, FixedScaleAxis } from '/ui/chartist.mjs';

      var dataLast;
      const dataStale = 120*1000;
      const spinRate = 200;
      var spinState = 0;

      var flowChart;
      const flowConfig = [!configToJson waterplant measurement flow];

      var tankChart;
      const tankConfig = [!configToJson waterplant measurement tank];

      function reloadPage() {
        location.reload(true);
      }

      function ticker() {
          if ( dataLast == null ) {
            document.getElementById("dataLast").style.color = "yellow";
            return;
          }
          const timeNow = Date.now();

          if ( timeNow - dataLast.getTime() > dataStale ) {
            document.getElementById("dataLast").style.color = "red";
          } else {
            document.getElementById("dataLast").style.color = "black";
          }

          const spinner = "_.:^*  ".split("");   // "-\\|/".split("");
          spinState++;
          document.getElementById("spinner").textContent = spinner[spinState % spinner.length];
      }

      function clip(min, max, value) {
          return Math.max(min ,Math.min(max, value));
      }

      function scaleData(rawData, i, c) {
        const data = rawData.map(d => ({ x: new Date(d[0]*1000), y: clip(c.min, c.max, (d[i]-c.zero) * c.scale) }));
        const len  = data.length;
        const sum  = data.slice(len-c.averageN).reduce((a, v) => a + v.y, 0);
        const mean = sum/c.averageN;

        return { data: data, mean: mean }
      }

      function updateCharts() {
        const lookback = document.getElementById("lookback");

        // const url = `http://data.rkroll.com:7777/query/log/-2h/-30`;
        const url = `http://data.rkroll.com:7777/query/log/-%{lookback.value}/-30`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
            const { data: flowData, mean: flowMean } = scaleData(data, 1, flowConfig);
            const { data: tankData, mean: tankMean } = scaleData(data, 2, tankConfig);

            dataLast = new Date(data[data.length-1][0] * 1000);

            document.getElementById("dataLast").textContent = dataLast.toLocaleString();
            document.getElementById("flowLast").textContent = flowMean.toFixed(0) + " GPM";
            document.getElementById("tankLast").textContent = tankMean.toFixed(0) + "%";

            flowChart.update({ series: [flowData] });
            tankChart.update({ series: [tankData] });
            }
        );
      }

    const chartOptions = {
      low: 0,
      showPoint: false,
      showGrid: false,
      axisX: { 
          showGrid: false,
          type: FixedScaleAxis,
          divisor: 7,
          labelInterpolationFnc: value =>
            new Date(value).toLocaleString(undefined, {
              month: 'short',
              day: 'numeric',
              hour: 'numeric',
              minute: 'numeric'
              })
      },
      axisY: { 
        showGrid: false,
        onlyInteger: true
      }
    }
    const flowChartOptions = {
        ... chartOptions,
        low:   0,
        high:  flowConfig.max
    }
    const tankChartOptions = {
        ... chartOptions,
        low:   0,
        high:  tankConfig.max,
        ticks: [0, 25, 45, 75, 100]
    }

    function loadPage() {
        flowChart = new LineChart("#flowChart", { series: [[]] }, flowChartOptions);
        tankChart = new LineChart("#tankChart", { series: [[]] }, tankChartOptions);

        updateCharts();
    }

    setInterval(() => { ticker(); }, spinRate);
    setInterval(() => { updateCharts(); }, 20000);
    setInterval(() => { reloadPage(); }, 1000*60*60);

    window.loadPage = loadPage;
    window.updateCharts = updateCharts;
  </script>
</head>

<body onLoad="loadPage()">
    <div class="hdr">
    <h4><b>Twilight Park Water Monitor</b>
        &nbsp:&nbsp
        <text id=dataLast>Timer</text>
        &nbsp:&nbsp
        <text id=spinner>spinner</text>
    </h4>
    <span>
    Look Back 
    <select name="lookback" id="lookback" onChange="updateCharts();">
          <option value="1h">Hour</option>
          <option value="1d" selected>Day</option>
          <option value="1w">Week</option>
          <option value="1t">Month</option>
    </select>
    </span>
    </div>
    <br>
    <br>
    <div style="clear:both"></div>

    <div class="hdr"> <center><h1 class="chartTitle">Water Flow<span id=flowLast>Flow</span></h1></center></div>
    <div id="flowChart" class="chart"></div>

    <div class="hdr"> <center><h1 class="chartTitle">Tank Level<span id=tankLast>Tank</span></h1></center></div>
    <div id="tankChart" class="chart"></div>
</body>
</html>
